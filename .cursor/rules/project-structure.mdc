# Astro博客项目架构规则

## 项目概述
这是一个基于Astro框架的现代化博客项目，使用astro-pure主题，具有完整的博客功能、响应式设计和优秀的性能表现。

## 核心技术栈
- **框架**: Astro 5.8.1 (静态站点生成器)
- **主题**: astro-pure 1.3.1 (简洁强大的博客主题)
- **语言**: TypeScript 5.8.3
- **样式**: UnoCSS (原子化CSS框架)
- **构建工具**: Vite (通过Astro)
- **部署**: 支持Vercel、静态部署等

## 项目结构规则

### 1. 根目录结构
```
blog/
├── astro.config.ts          # Astro主配置文件
├── package.json             # 项目依赖和脚本
├── tsconfig.json            # TypeScript配置
├── uno.config.ts            # UnoCSS配置
├── packages/pure/           # astro-pure主题包
├── src/                     # 源代码目录
├── public/                  # 静态资源目录
└── preset/                  # 自定义预设
```

### 2. 源代码组织 (src/)
```
src/
├── assets/                  # 静态资源(图片、字体、样式)
├── components/              # 可复用组件
├── content/                 # 内容文件(MD/MDX)
├── layouts/                 # 页面布局组件
├── pages/                   # 页面路由
├── plugins/                 # 自定义插件
├── site.config.ts           # 站点配置
└── type.d.ts               # 类型定义
```

### 3. 主题包结构 (packages/pure/)
```
packages/pure/
├── components/              # 主题组件
│   ├── advanced/           # 高级组件
│   ├── basic/              # 基础组件
│   ├── pages/              # 页面组件
│   └── user/               # 用户组件
├── libs/                   # 工具库
├── plugins/                # 主题插件
├── schemas/                # 配置模式
├── types/                  # 类型定义
└── utils/                  # 工具函数
```

## 开发规则

### 1. 文件命名约定
- **组件**: PascalCase (如 `Header.astro`, `ProjectCard.astro`)
- **页面**: kebab-case (如 `about/index.astro`, `blog/[...id].astro`)
- **工具函数**: camelCase (如 `date.ts`, `theme.ts`)
- **配置文件**: kebab-case (如 `site.config.ts`, `astro.config.ts`)

### 2. 导入路径别名
```typescript
// tsconfig.json中定义的路径别名
"@/assets/*": ["src/assets/*"]
"@/components/*": ["src/components/*"]
"@/layouts/*": ["src/layouts/*"]
"@/utils": ["src/utils/index.ts"]
"@/plugins/*": ["src/plugins/*"]
"@/pages/*": ["src/pages/*"]
"@/types": ["src/types/index.ts"]
"@/site-config": ["src/site.config.ts"]
```

### 3. 组件开发规范
- **Astro组件**: 使用 `.astro` 扩展名
- **React组件**: 使用 `.tsx` 扩展名 (如果集成)
- **样式**: 优先使用UnoCSS类，必要时使用CSS模块
- **类型**: 所有组件都应该有完整的TypeScript类型定义

### 4. 内容管理规则
- **博客文章**: 放在 `src/content/blog/` 目录
- **文档**: 放在 `src/content/docs/` 目录
- **格式**: 支持Markdown和MDX
- **元数据**: 使用Front Matter定义文章属性

## 配置规则

### 1. Astro配置 (astro.config.ts)
- 集成astro-pure主题
- 配置Markdown处理 (数学公式、代码高亮)
- 设置图片优化服务
- 配置构建输出和部署选项

### 2. 站点配置 (src/site.config.ts)
- 主题配置 (标题、作者、描述等)
- 集成配置 (评论、搜索、社交等)
- 内容配置 (分页、外部链接等)
- 自定义CSS和头部配置

### 3. TypeScript配置 (tsconfig.json)
- 继承Astro严格配置
- 启用严格空值检查
- 配置路径别名
- 支持DOM和ES2022特性

### 4. UnoCSS配置 (uno.config.ts)
- 预设配置 (mini、typography)
- 自定义规则和变体
- 响应式设计支持
- 暗色主题支持

## 布局系统规则

### 1. 布局组件层次
```
BaseLayout.astro           # 基础布局 (HTML结构、头部、底部)
├── ContentLayout.astro    # 内容布局 (侧边栏、主内容区)
├── BlogPost.astro         # 博客文章布局
├── CommonPage.astro       # 通用页面布局
└── IndividualPage.astro   # 独立页面布局
```

### 2. 页面类型
- **首页**: `src/pages/index.astro`
- **博客**: `src/pages/blog/[...id].astro` (动态路由)
- **标签页**: `src/pages/tags/[tag]/[...page].astro`
- **关于页**: `src/pages/about/index.astro`
- **项目页**: `src/pages/projects/index.astro`
- **链接页**: `src/pages/links/index.astro`

## 组件系统规则

### 1. 组件分类
- **基础组件**: Header、Footer、ThemeProvider等
- **页面组件**: Hero、ProjectCard、FriendList等
- **高级组件**: Comment、GithubCard、LinkPreview等
- **用户组件**: Button、Card、Tabs等

### 2. 组件导入方式
```typescript
// 从主题包导入
import { Header, Footer } from 'astro-pure/components/basic'
import { Button, Card } from 'astro-pure/components/user'

// 从本地导入
import BaseHead from '@/components/BaseHead.astro'
import ProjectCard from '@/components/home/ProjectCard.astro'
```

## 样式系统规则

### 1. UnoCSS使用原则
- 优先使用原子化CSS类
- 利用预设的响应式前缀
- 自定义组件样式通过CSS变量
- 支持暗色主题切换

### 2. 全局样式
- 主样式文件: `src/assets/styles/app.css`
- 字体配置: `public/fonts/`
- 图标系统: `public/icons/` 和 `src/assets/icons/`

### 3. 字体系统配置
#### 字体文件
- **霞鹜文楷 (LXGWWenKai)**: 中文字体，位于 `public/fonts/LXGWWenKai-Regular.ttf`
- **Satoshi**: 英文字体，位于 `public/fonts/Satoshi-Variable.ttf`
- **等宽字体**: 代码显示，使用系统等宽字体

#### 字体回退策略
```css
/* 中文字体优先 */
font-family: 'LXGWWenKai', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif;

/* 英文字体回退 */
font-family: 'Satoshi', 'LXGWWenKai', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif;

/* 代码字体 */
font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Source Code Pro', 'Menlo', 'Consolas', 'DejaVu Sans Mono', monospace;
```

#### UnoCSS字体类
- `font-wenkai`: 使用霞鹜文楷字体
- `font-satoshi`: 使用Satoshi字体
- `font-mono`: 使用等宽字体

#### 字体性能优化
- **预加载**: 在 `BaseHead.astro` 中配置字体预加载
- **字体回退**: 使用 `font-display: swap` 优化加载体验
- **Unicode范围**: 限制中文字体只在中文字符范围内加载
- **预连接**: 优化外部字体资源的连接

#### 字体文件管理
- 字体文件存放在 `public/fonts/` 目录
- 支持TTF格式，兼容性好
- 建议使用字体子集化工具减少文件大小
- 可考虑使用CDN分发字体文件

## 构建和部署规则

### 1. 构建脚本
```bash
npm run dev          # 开发服务器
npm run build        # 生产构建
npm run preview      # 预览构建结果
npm run check        # 类型检查
npm run format       # 代码格式化
npm run lint         # 代码检查
```

### 2. 部署选项
- **Vercel**: 支持SSR和静态部署
- **静态部署**: 生成静态文件
- **GitHub Pages**: 通过GitHub Actions自动部署

## 开发最佳实践

### 1. 性能优化
- 使用Astro的静态生成
- 图片优化和懒加载
- 代码分割和预加载
- SEO友好的元数据

### 2. 可访问性
- 语义化HTML结构
- 键盘导航支持
- 屏幕阅读器友好
- 高对比度主题支持

### 3. 代码质量
- TypeScript严格模式
- ESLint代码检查
- Prettier代码格式化
- 组件文档和类型定义

## 故障排除

### 1. 常见问题
- 路径别名不工作: 检查tsconfig.json配置
- 样式不生效: 确认UnoCSS配置和导入
- 构建失败: 检查依赖版本兼容性
- 类型错误: 运行`npm run check`查看详情

### 2. 调试技巧
- 使用`console.log`和浏览器开发者工具
- 检查Astro构建日志
- 验证配置文件语法
- 确认依赖安装完整性

## 扩展和自定义

### 1. 添加新功能
- 在`src/components/`中创建新组件
- 在`src/pages/`中添加新页面
- 在`src/plugins/`中创建自定义插件
- 在`src/utils/`中添加工具函数

### 2. 主题定制
- 修改`src/site.config.ts`中的主题配置
- 自定义UnoCSS规则
- 覆盖主题组件的样式
- 添加新的布局选项

这些规则将帮助你更好地理解和使用这个Astro博客项目的架构，提高开发效率和代码质量。

有大的功能更新，记录及更新相关文档，文档位于 `doc` 目录下

使用文档详情可以参考 `src/content/docs` 目录下的文档
---


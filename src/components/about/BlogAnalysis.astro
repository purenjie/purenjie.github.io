---
// Blog analysis visualization using ECharts (client-side script)
const dataUrl = '/data/blog-analysis.json'
---

<section id="ai-blog-analysis" class="space-y-8">
  <h2 class="text-xl font-semibold">AI 博客分析</h2>
  <div class="grid gap-8">
    <div>
      <h3 class="mb-3 text-base font-medium">写作风格雷达</h3>
      <div id="tone-radar" class="w-full h-[360px] rounded-md border border-muted"></div>
    </div>
    <div>
      <h3 class="mb-3 text-base font-medium">句长分布</h3>
      <div id="sentence-bar" class="w-full h-[360px] rounded-md border border-muted"></div>
    </div>
    <div>
      <h3 class="mb-3 text-base font-medium">主题分布</h3>
      <div id="topic-donut" class="w-full h-[360px] rounded-md border border-muted"></div>
    </div>
    <div>
      <h3 class="mb-3 text-base font-medium">概念关系网络</h3>
      <div id="concept-force" class="w-full h-[360px] rounded-md border border-muted"></div>
    </div>
    <div>
      <h3 class="mb-3 text-base font-medium">整体情感</h3>
      <div id="sentiment-gauge" class="w-full h-[360px] rounded-md border border-muted"></div>
    </div>
    <div>
      <h3 class="mb-3 text-base font-medium">知识深度演变</h3>
      <div id="timeline-depth" class="w-full h-[360px] rounded-md border border-muted"></div>
    </div>
    <div>
      <h3 class="mb-3 text-base font-medium">高频词云</h3>
      <div id="word-cloud" class="w-full h-[360px] rounded-md border border-muted"></div>
    </div>
  </div>

  <script>
    // @ts-nocheck
    /**
     * Client script is plain JS; add minimal inline JSDoc for type hints.
     */
    (async () => {
      // dynamic import without types to avoid TS errors in Astro
      // @ts-ignore
      const echarts = await import('echarts')
      // @ts-ignore
      try { await import('echarts-wordcloud') } catch {}

      const res = await fetch('/data/blog-analysis.json').catch(() => null)
      if (!res || !res.ok) return
      const data = await res.json().catch(() => null)
      if (!data) return

      /** @param {string} id */
      const get = (id) => {
        const el = document.getElementById(id)
        if (!el) return null
        const chart = echarts.init(el)
        const ro = new ResizeObserver(() => chart.resize())
        ro.observe(el)
        return chart
      }

      const radar = get('tone-radar')
      if (radar && data.summary?.style?.toneAvg) {
        const tone = data.summary.style.toneAvg
        radar.setOption({
          tooltip: {},
          radar: { indicator: Object.keys(tone).map(k => ({ name: k, max: 1 })) },
          series: [{ type: 'radar', data: [{ value: Object.values(tone) }] }]
        })
      }

      const bar = get('sentence-bar')
      if (bar && Array.isArray(data.perArticle)) {
        const buckets = ['1-10','11-20','21-30','30+']
      /** @type {{ '1-10': number; '11-20': number; '21-30': number; '30+': number }} */
      const sum = { '1-10':0,'11-20':0,'21-30':0,'30+':0 }
      data.perArticle.forEach((a)=>{
        const b = (a && a.metrics && a.metrics.sentenceLenBuckets) || {}
        buckets.forEach((k)=> { sum[k] = (sum[k]||0) + (b[k]||0) })
      })
        bar.setOption({
          xAxis: { type:'category', data: buckets },
          yAxis: { type:'value' },
          series: [{ type:'bar', data: buckets.map(k=>sum[k]) }],
          tooltip: {}
        })
      }

      const donut = get('topic-donut')
      if (donut && Array.isArray(data.summary?.topics)) {
      const series = data.summary.topics.map((t)=>({ name: t.name, value: Math.max(0, Math.round(((t && t.ratio) || 0)*100)) }))
        donut.setOption({
          tooltip: { trigger:'item' },
          legend: { bottom: 0 },
          series: [{ type:'pie', radius:['40%','70%'], data: series }]
        })
      }

      const force = get('concept-force')
      if (force && data.summary?.conceptNetwork) {
      const nodes = (data.summary.conceptNetwork && data.summary.conceptNetwork.nodes) || []
      const links = (data.summary.conceptNetwork && data.summary.conceptNetwork.links) || []
        force.setOption({
          tooltip: {},
          series: [{
            type:'graph', layout:'force', roam:true,
            data: nodes.map((n)=>({ name: n.id, value: n.weight, symbolSize: Math.max(6, Math.min(28, (n && n.weight ? n.weight : 1)*2)) })),
            links: links,
            force: { repulsion: 120 }
          }]
        })
      }

      const gauge = get('sentiment-gauge')
      if (gauge && data.summary?.sentimentDist) {
        const s = data.summary.sentimentDist
        gauge.setOption({
          xAxis: { type:'category', data:['Sentiment'] },
          yAxis: { type:'value', max: 1 },
          series: [
            { type:'bar', stack:'s', name:'positive', data:[s.positive||0] },
            { type:'bar', stack:'s', name:'neutral', data:[s.neutral||0] },
            { type:'bar', stack:'s', name:'negative', data:[s.negative||0] }
          ],
          tooltip: { trigger:'axis' },
          legend: { bottom: 0 }
        })
      }

      const timeline = get('timeline-depth')
      if (timeline && Array.isArray(data.summary?.timelineDepth)) {
        const x = data.summary.timelineDepth.map((d)=> (d && d.date) || '')
        const y = data.summary.timelineDepth.map((d)=>{
          if (d.depth==='intro') return 1
          if (d.depth==='application') return 2
          if (d.depth==='principle') return 3
          return 0
        })
        timeline.setOption({
          xAxis: { type:'category', data: x },
          yAxis: { type:'value', min:0, max:3 },
          series: [{ type:'line', data: y }],
          tooltip: { trigger:'axis' }
        })
      }

      const wc = get('word-cloud')
      if (wc) {
        /** @type {Record<string, number>} */
        const freq = {}
        if (Array.isArray(data.perArticle)) {
          data.perArticle.forEach((a)=>{
            const kws = (a && a.content && a.content.keywords) || []
            kws.forEach((k)=>{ freq[k]=(freq[k]||0)+1 })
          })
        }
        const items = Object.entries(freq).sort((a,b)=>b[1]-a[1]).slice(0,60).map(([name,value])=>({ name, value }))
        wc.setOption({
          tooltip: {},
          series: [{ type: 'bar', data: items }]
        })
      }
    })()
  </script>
</section>


